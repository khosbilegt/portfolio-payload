/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    users: User;
    media: Media;
    blog: Blog;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    blog: BlogSelect<false> | BlogSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  slug: string;
  blocks?:
    | (
        | HeroBlock
        | CareerBlock
        | EducationBlock
        | TestimonialsBlock
        | CertificatesBlock
        | ServicesBlock
        | BlogCardsBlock
        | DonationBlock
        | ProjectShowcaseBlock
        | CodeBlock
      )[]
    | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock".
 */
export interface HeroBlock {
  title?: string | null;
  subtitle?: string | null;
  description?: string | null;
  ctaText?: string | null;
  ctaLink?: string | null;
  backgroundImage?: (string | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CareerBlock".
 */
export interface CareerBlock {
  title?: string | null;
  subtitle?: string | null;
  experiences?:
    | {
        company: string;
        position: string;
        duration: string;
        location?: string | null;
        description?: string | null;
        achievements?:
          | {
              achievement?: string | null;
              id?: string | null;
            }[]
          | null;
        technologies?:
          | {
              technology?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'career';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EducationBlock".
 */
export interface EducationBlock {
  title?: string | null;
  subtitle?: string | null;
  educations?:
    | {
        institution: string;
        degree: string;
        field?: string | null;
        duration: string;
        location?: string | null;
        gpa?: string | null;
        description?: string | null;
        achievements?:
          | {
              achievement?: string | null;
              id?: string | null;
            }[]
          | null;
        relevantCourses?:
          | {
              course?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'education';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialsBlock".
 */
export interface TestimonialsBlock {
  title?: string | null;
  subtitle?: string | null;
  testimonials?:
    | {
        name: string;
        position?: string | null;
        company?: string | null;
        content: string;
        rating?: number | null;
        avatar?: (string | null) | Media;
        featured?: boolean | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonials';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CertificatesBlock".
 */
export interface CertificatesBlock {
  title?: string | null;
  subtitle?: string | null;
  certificates?:
    | {
        title: string;
        issuer: string;
        description?: string | null;
        issueDate: string;
        /**
         * Leave empty if certificate does not expire
         */
        expiryDate?: string | null;
        /**
         * Certificate ID or credential number
         */
        credentialId?: string | null;
        /**
         * Certificate image or badge
         */
        certificateImage?: (string | null) | Media;
        /**
         * URL to verify the certificate
         */
        verificationUrl?: string | null;
        /**
         * Skills covered by this certificate
         */
        skills?:
          | {
              skill?: string | null;
              id?: string | null;
            }[]
          | null;
        category?:
          | (
              | 'programming'
              | 'cloud'
              | 'data-science'
              | 'devops'
              | 'security'
              | 'design'
              | 'project-management'
              | 'other'
            )
          | null;
        featured?: boolean | null;
        status?: ('active' | 'expired' | 'in-progress') | null;
        /**
         * Score or grade achieved (e.g., "95%", "A+", "Pass")
         */
        score?: string | null;
        /**
         * Course duration (e.g., "40 hours", "3 months")
         */
        duration?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Show category filters above certificates
   */
  showFilters?: boolean | null;
  layout?: ('grid' | 'list' | 'timeline') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'certificates';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServicesBlock".
 */
export interface ServicesBlock {
  title?: string | null;
  subtitle?: string | null;
  services?:
    | {
        title: string;
        description: string;
        /**
         * Icon name or emoji
         */
        icon?: string | null;
        features?:
          | {
              feature?: string | null;
              id?: string | null;
            }[]
          | null;
        price?: string | null;
        priceDescription?: string | null;
        ctaText?: string | null;
        ctaLink?: string | null;
        featured?: boolean | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'services';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogCardsBlock".
 */
export interface BlogCardsBlock {
  title?: string | null;
  subtitle?: string | null;
  /**
   * Number of blog posts to display
   */
  showCount?: number | null;
  viewAllText?: string | null;
  viewAllLink?: string | null;
  posts?:
    | {
        title: string;
        excerpt: string;
        slug: string;
        publishedAt: string;
        author?: string | null;
        readTime?: string | null;
        featuredImage?: (string | null) | Media;
        category?: string | null;
        tags?:
          | {
              tag?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'blogCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DonationBlock".
 */
export interface DonationBlock {
  title?: string | null;
  subtitle?: string | null;
  description?: string | null;
  thankYouMessage?: string | null;
  donationLinks?:
    | {
        platform?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'donation';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectShowcaseBlock".
 */
export interface ProjectShowcaseBlock {
  title?: string | null;
  subtitle?: string | null;
  projects?:
    | {
        title: string;
        description: string;
        /**
         * Brief one-line description for card view
         */
        shortDescription?: string | null;
        featuredImage: string | Media;
        gallery?:
          | {
              image?: (string | null) | Media;
              id?: string | null;
            }[]
          | null;
        technologies?:
          | {
              technology?: string | null;
              id?: string | null;
            }[]
          | null;
        category?: ('web' | 'mobile' | 'desktop' | 'design' | 'other') | null;
        status?: ('completed' | 'in-progress' | 'concept') | null;
        featured?: boolean | null;
        /**
         * Live demo URL
         */
        liveUrl?: string | null;
        /**
         * GitHub repository URL
         */
        githubUrl?: string | null;
        /**
         * Link to detailed case study
         */
        caseStudyUrl?: string | null;
        startDate?: string | null;
        endDate?: string | null;
        client?: string | null;
        teamSize?: number | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Show category filters above projects
   */
  showFilters?: boolean | null;
  layout?: ('grid' | 'masonry' | 'list') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'projectShowcase';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  /**
   * Optional. Used for syntax highlighting classes (e.g., language-ts).
   */
  language?: ('plaintext' | 'javascript' | 'typescript' | 'json' | 'css' | 'html' | 'bash' | 'markdown') | null;
  code: string;
  caption?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'codeBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  profilePicture?: (string | null) | Media;
  bio?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog".
 */
export interface Blog {
  id: string;
  title: string;
  category: string;
  slug: string;
  author?: (string | null) | User;
  publishedAt: string;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'blog';
        value: string | Blog;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  blocks?:
    | T
    | {
        hero?: T | HeroBlockSelect<T>;
        career?: T | CareerBlockSelect<T>;
        education?: T | EducationBlockSelect<T>;
        testimonials?: T | TestimonialsBlockSelect<T>;
        certificates?: T | CertificatesBlockSelect<T>;
        services?: T | ServicesBlockSelect<T>;
        blogCards?: T | BlogCardsBlockSelect<T>;
        donation?: T | DonationBlockSelect<T>;
        projectShowcase?: T | ProjectShowcaseBlockSelect<T>;
        codeBlock?: T | CodeBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock_select".
 */
export interface HeroBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  description?: T;
  ctaText?: T;
  ctaLink?: T;
  backgroundImage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CareerBlock_select".
 */
export interface CareerBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  experiences?:
    | T
    | {
        company?: T;
        position?: T;
        duration?: T;
        location?: T;
        description?: T;
        achievements?:
          | T
          | {
              achievement?: T;
              id?: T;
            };
        technologies?:
          | T
          | {
              technology?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EducationBlock_select".
 */
export interface EducationBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  educations?:
    | T
    | {
        institution?: T;
        degree?: T;
        field?: T;
        duration?: T;
        location?: T;
        gpa?: T;
        description?: T;
        achievements?:
          | T
          | {
              achievement?: T;
              id?: T;
            };
        relevantCourses?:
          | T
          | {
              course?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialsBlock_select".
 */
export interface TestimonialsBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  testimonials?:
    | T
    | {
        name?: T;
        position?: T;
        company?: T;
        content?: T;
        rating?: T;
        avatar?: T;
        featured?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CertificatesBlock_select".
 */
export interface CertificatesBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  certificates?:
    | T
    | {
        title?: T;
        issuer?: T;
        description?: T;
        issueDate?: T;
        expiryDate?: T;
        credentialId?: T;
        certificateImage?: T;
        verificationUrl?: T;
        skills?:
          | T
          | {
              skill?: T;
              id?: T;
            };
        category?: T;
        featured?: T;
        status?: T;
        score?: T;
        duration?: T;
        id?: T;
      };
  showFilters?: T;
  layout?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServicesBlock_select".
 */
export interface ServicesBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  services?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        features?:
          | T
          | {
              feature?: T;
              id?: T;
            };
        price?: T;
        priceDescription?: T;
        ctaText?: T;
        ctaLink?: T;
        featured?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogCardsBlock_select".
 */
export interface BlogCardsBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  showCount?: T;
  viewAllText?: T;
  viewAllLink?: T;
  posts?:
    | T
    | {
        title?: T;
        excerpt?: T;
        slug?: T;
        publishedAt?: T;
        author?: T;
        readTime?: T;
        featuredImage?: T;
        category?: T;
        tags?:
          | T
          | {
              tag?: T;
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DonationBlock_select".
 */
export interface DonationBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  description?: T;
  thankYouMessage?: T;
  donationLinks?:
    | T
    | {
        platform?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectShowcaseBlock_select".
 */
export interface ProjectShowcaseBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  projects?:
    | T
    | {
        title?: T;
        description?: T;
        shortDescription?: T;
        featuredImage?: T;
        gallery?:
          | T
          | {
              image?: T;
              id?: T;
            };
        technologies?:
          | T
          | {
              technology?: T;
              id?: T;
            };
        category?: T;
        status?: T;
        featured?: T;
        liveUrl?: T;
        githubUrl?: T;
        caseStudyUrl?: T;
        startDate?: T;
        endDate?: T;
        client?: T;
        teamSize?: T;
        id?: T;
      };
  showFilters?: T;
  layout?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock_select".
 */
export interface CodeBlockSelect<T extends boolean = true> {
  language?: T;
  code?: T;
  caption?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  profilePicture?: T;
  bio?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog_select".
 */
export interface BlogSelect<T extends boolean = true> {
  title?: T;
  category?: T;
  slug?: T;
  author?: T;
  publishedAt?: T;
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}